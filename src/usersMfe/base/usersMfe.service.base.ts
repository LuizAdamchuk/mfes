/*
------------------------------------------------------------------------------
This code was generated by Amplication.

Changes to this file will be lost if the code is regenerated.

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UsersMfe } from "@prisma/client";

export class UsersMfeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UsersMfeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersMfeCountArgs>
  ): Promise<number> {
    return this.prisma.usersMfe.count(args);
  }

  async usersMfes<T extends Prisma.UsersMfeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersMfeFindManyArgs>
  ): Promise<UsersMfe[]> {
    return this.prisma.usersMfe.findMany(args);
  }

  async usersMfe<T extends Prisma.UsersMfeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersMfeFindUniqueArgs>
  ): Promise<UsersMfe | null> {
    return this.prisma.usersMfe.findUnique(args);
  }
  
  async createUsersMfe<T extends Prisma.UsersMfeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersMfeCreateArgs>
  ): Promise<UsersMfe> {
    return this.prisma.usersMfe.create<T>(args);
  }

  async createManyUsersMfe(args: any[]): Promise<void> {
    const createUserOperations = args.map((arg) =>
      this.prisma.usersMfe.create({ data: arg })
    );
    await this.prisma.$transaction(createUserOperations);
  }

  async updateUsersMfe<T extends Prisma.UsersMfeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersMfeUpdateArgs>
  ): Promise<UsersMfe> {
    return this.prisma.usersMfe.update<T>(args);
  }

  async deleteUsersMfe<T extends Prisma.UsersMfeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersMfeDeleteArgs>
  ): Promise<UsersMfe> {
    return this.prisma.usersMfe.delete(args);
  }

  async deleteUsersMfeByMfeId(mfeId: string): Promise<void> {
    await this.prisma.usersMfe.deleteMany({
      where: {
        mfeId,
      },
    });
  }

  async deleteUsersMfeByUserId(userId: string): Promise<void> {
    await this.prisma.usersMfe.deleteMany({
      where: {
        userId,
      },
    });
  }
}
