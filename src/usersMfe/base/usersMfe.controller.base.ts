/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsersMfeService } from "../usersMfe.service";
import { UsersMfeCreateInput } from "./UsersMfeCreateInput";
import { UsersMfe } from "./UsersMfe";
import { UsersMfeFindManyArgs } from "./UsersMfeFindManyArgs";
import { UsersMfeWhereUniqueInput } from "./UsersMfeWhereUniqueInput";
import { UsersMfeUpdateInput } from "./UsersMfeUpdateInput";

export class UsersMfeControllerBase {
  constructor(protected readonly service: UsersMfeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UsersMfe })
  async createUsersMfe(
    @common.Body() data: UsersMfeCreateInput
  ): Promise<UsersMfe> {
    return await this.service.createUsersMfe({
      data: data,
      select: {
        createdAt: true,
        id: true,
        mfeId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UsersMfe] })
  @ApiNestedQuery(UsersMfeFindManyArgs)
  async usersMfes(@common.Req() request: Request): Promise<UsersMfe[]> {
    const args = plainToClass(UsersMfeFindManyArgs, request.query);
    return this.service.usersMfes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        mfeId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UsersMfe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async usersMfe(
    @common.Param() params: UsersMfeWhereUniqueInput
  ): Promise<UsersMfe | null> {
    const result = await this.service.usersMfe({
      where: params,
      select: {
        createdAt: true,
        id: true,
        mfeId: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UsersMfe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsersMfe(
    @common.Param() params: UsersMfeWhereUniqueInput,
    @common.Body() data: UsersMfeUpdateInput
  ): Promise<UsersMfe | null> {
    try {
      return await this.service.updateUsersMfe({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          mfeId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UsersMfe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsersMfe(
    @common.Param() params: UsersMfeWhereUniqueInput
  ): Promise<UsersMfe | null> {
    try {
      return await this.service.deleteUsersMfe({
        where: params,
        select: {
          createdAt: true,
          id: true,
          mfeId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
